From c38cd22ad2334cb576cd5772cc572f33a1029fda Mon Sep 17 00:00:00 2001
From: Swati Prajapati <swati.1721cs141@kiet.edu>
Date: Thu, 28 May 2020 08:14:47 +0530
Subject: [PATCH] Create Patch File

---
 0001-Create-Patch-file.patch | 102 +++++++++++++++++++++++++++++++++++
 client_test.py               |  41 ++++++++++++--
 2 files changed, 138 insertions(+), 5 deletions(-)
 create mode 100644 0001-Create-Patch-file.patch

diff --git a/0001-Create-Patch-file.patch b/0001-Create-Patch-file.patch
new file mode 100644
index 0000000..1b973ac
--- /dev/null
+++ b/0001-Create-Patch-file.patch
@@ -0,0 +1,102 @@
+From bf0acf678facf38345477de6531be6ff36b46767 Mon Sep 17 00:00:00 2001
+From: Swati Prajapati <prajapatiswati4@gmail.com>
+Date: Thu, 28 May 2020 07:54:25 +0530
+Subject: [PATCH] Create Patch file
+
+---
+ client3.py     | 12 ++++++++----
+ client_test.py | 27 +++++++++++++++++++++++++--
+ 2 files changed, 33 insertions(+), 6 deletions(-)
+
+diff --git a/client3.py b/client3.py
+index f1771c3..e8d8a8d 100644
+--- a/client3.py
++++ b/client3.py
+@@ -35,25 +35,29 @@ def getDataPoint(quote):
+ 	stock = quote['stock']
+ 	bid_price = float(quote['top_bid']['price'])
+ 	ask_price = float(quote['top_ask']['price'])
+-	price = bid_price
++	price = (bid_price+ask_price)/2;
+ 	return stock, bid_price, ask_price, price
+ 
+ def getRatio(price_a, price_b):
+ 	""" Get ratio of price_a and price_b """
+ 	""" ------------- Update this function ------------- """
+ 	""" Also create some unit tests for this function in client_test.py """
+-	return 1
++	if(price_b==0):
++		return
++	return price_a/price_b;
+ 
+ # Main
+ if __name__ == "__main__":
+ 
+ 	# Query the price once every N seconds.
+-	for _ in iter(range(N)):
++	for _ in range(N):
+ 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+ 
+ 		""" ----------- Update to get the ratio --------------- """
++		prices={}
+ 		for quote in quotes:
+ 			stock, bid_price, ask_price, price = getDataPoint(quote)
++			prices[stock]=price
+ 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+ 
+-		print ("Ratio %s" % getRatio(price, price))
++		print ("Ratio %s" % (getRatio(prices['ABC'], prices['DEF'])))
+diff --git a/client_test.py b/client_test.py
+index af2bf26..47616bc 100644
+--- a/client_test.py
++++ b/client_test.py
+@@ -1,5 +1,5 @@
+ import unittest
+-from client3 import getDataPoint
++from client3 import *
+ 
+ class ClientTest(unittest.TestCase):
+   def test_getDataPoint_calculatePrice(self):
+@@ -8,6 +8,9 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
++
+ 
+   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+     quotes = [
+@@ -16,8 +19,28 @@ class ClientTest(unittest.TestCase):
+     ]
+     """ ------------ Add the assertion below ------------ """
+ 
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
++  
++  def test_getRatio_calculatePriceBidLessThanAsk(self):
++    quotes = [
++      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++    ]
++      """ ------------ Add the assertion below ------------ """
++      prices={}
++    for quote in quotes:
++      stock, bid_price, ask_price, price = getDataPoint(quote)
++      prices[stock]=price
++      self.assertEqual(getRatio(prices['ABC'], prices['DEF']), (prices['ABC']/prices['DEF']))
++
++  def test_getRatio_calculatePriceBidGreaterThanAsk(self):
++    quotes = [
++      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++    ]
++
+ 
+-  """ ------------ Add more unit tests ------------ """
+ 
+ 
+ 
+-- 
+2.22.0.windows.1
+
diff --git a/client_test.py b/client_test.py
index 47616bc..e2c9909 100644
--- a/client_test.py
+++ b/client_test.py
@@ -28,18 +28,49 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
       """ ------------ Add the assertion below ------------ """
-      prices={}
     for quote in quotes:
-      stock, bid_price, ask_price, price = getDataPoint(quote)
-      prices[stock]=price
-      self.assertEqual(getRatio(prices['ABC'], prices['DEF']), (prices['ABC']/prices['DEF']))
-
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
+  
+    
   def test_getRatio_calculatePriceBidGreaterThanAsk(self):
     quotes = [
       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
+    """ ------------ Add the assertion below ------------ """
+      prices={}
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock]=price
+      self.assertEqual(getRatio(prices['ABC'], prices['DEF']), (prices['ABC']/prices['DEF']))
+
+
+
+    """ ------------ Add more unit tests ------------ """
+    def test_getRatio_priceBZero(self):
+      price_a = 119.2
+      price_b = 0
+      self.assertIsNone(getRatio(price_a, price_b))
+
+    def test_getRatio_priceAZero(self):
+      price_a = 0
+      price_b = 121.68
+      self.assertEqual(getRatio(price_a, price_b), 0)
+ 
+    def test_getRatio_greaterThan1(self):
+      price_a = 346.48
+      price_b = 166.39
+      self.assertGreater(getRatio(price_a, price_b), 1)
+
+    def test_getRatio_LessThan1(self):
+      price_a = 166.39
+      price_b = 356.48
+      self.assertLess(getRatio(price_a, price_b), 1)
 
+    def test_getRatio_exactlyOne(self):
+      price_a = 356.48
+      price_b = 356.48
+      self.assertEqual(getRatio(price_a, price_b), 1)
 
 
 
-- 
2.22.0.windows.1

